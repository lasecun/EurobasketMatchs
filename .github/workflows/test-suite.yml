name: 🧪 Test Suite - Comprehensive Testing

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests every day at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  # ============================================================================
  # JOB 1: UNIT TESTS
  # ============================================================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-home-cache-cleanup: true

    - name: 🔧 Make gradlew executable
      run: chmod +x ./gradlew

    - name: 📦 Cache Gradle Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-

    - name: 🔍 Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: 🔥 Setup Firebase Configuration
      env:
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      run: |
        echo "=== EXTREME FIREBASE DEBUGGING (Test Suite) ==="
        echo "Working directory: $(pwd)"
        echo "User: $(whoami)"
        echo "Date: $(date)"
        
        # Step 1: Check environment variables
        echo "--- Step 1: Environment Analysis ---"
        if [ -z "$GOOGLE_SERVICES_JSON" ]; then
          echo "❌ CRITICAL: GOOGLE_SERVICES_JSON environment variable is EMPTY or NOT SET!"
          echo "Available environment variables containing 'GOOGLE':"
          env | grep -i google || echo "No Google-related environment variables found"
          echo ""
          echo "This means either:"
          echo "1. The secret 'GOOGLE_SERVICES_JSON' is not configured in GitHub"
          echo "2. The secret exists but contains no content"
          echo "3. There's a permission issue accessing the secret"
          echo ""
          echo "SOLUTION: Go to GitHub repo → Settings → Secrets and variables → Actions"
          echo "Check that 'GOOGLE_SERVICES_JSON' exists and has content"
          exit 1
        fi
        
        echo "✅ Secret environment variable exists"
        echo "📏 Content length: ${#GOOGLE_SERVICES_JSON} characters"
        
        # Step 2: Analyze secret content
        echo "--- Step 2: Content Analysis ---"
        if [ ${#GOOGLE_SERVICES_JSON} -lt 50 ]; then
          echo "⚠️  WARNING: Secret seems too short for a valid Firebase config"
          echo "First 30 chars: '$(echo "$GOOGLE_SERVICES_JSON" | head -c 30)'"
        fi
        
        # Check if it looks like JSON
        if echo "$GOOGLE_SERVICES_JSON" | grep -q "^{"; then
          echo "✅ Content starts with '{' (looks like JSON)"
        else
          echo "⚠️  Content doesn't start with '{' - may not be JSON"
          echo "First 20 chars: '$(echo "$GOOGLE_SERVICES_JSON" | head -c 20)'"
        fi
        
        # Step 3: Create directories
        echo "--- Step 3: Directory Creation ---"
        mkdir -p app
        mkdir -p app/src
        mkdir -p app/src/debug
        echo "✅ Created directories: app/, app/src/, app/src/debug/"
        
        # Step 4: Create files in ALL possible locations
        echo "--- Step 4: File Creation ---"
        echo "$GOOGLE_SERVICES_JSON" > app/google-services.json
        echo "$GOOGLE_SERVICES_JSON" > app/src/google-services.json
        echo "$GOOGLE_SERVICES_JSON" > app/src/debug/google-services.json
        
        # Step 5: Verify ALL file locations
        echo "--- Step 5: File Verification ---"
        locations=(
          "app/google-services.json"
          "app/src/google-services.json" 
          "app/src/debug/google-services.json"
        )
        
        all_success=true
        for location in "${locations[@]}"; do
          if [ -f "$location" ] && [ -s "$location" ]; then
            size=$(wc -c < "$location")
            echo "✅ $location - EXISTS (${size} bytes)"
            echo "   Permissions: $(ls -la "$location")"
            echo "   First line: $(head -n 1 "$location" | head -c 50)..."
          else
            echo "❌ $location - MISSING or EMPTY"
            all_success=false
          fi
        done
        
        # Step 6: Final validation
        echo "--- Step 6: Final Validation ---"
        if [ "$all_success" = true ]; then
          echo "✅ ALL FILES CREATED SUCCESSFULLY"
          
          # Try to validate JSON structure
          if command -v python3 >/dev/null 2>&1; then
            echo "--- JSON Validation ---"
            if echo "$GOOGLE_SERVICES_JSON" | python3 -m json.tool >/dev/null 2>&1; then
              echo "✅ Valid JSON structure"
            else
              echo "⚠️  Invalid JSON structure - but files exist"
            fi
          fi
          
          # Show absolute paths (what Google Services plugin will see)
          echo "--- Absolute Paths ---"
          for location in "${locations[@]}"; do
            echo "📁 $(pwd)/$location"
          done
          
        else
          echo "❌ CRITICAL ERROR: Not all files were created successfully"
          echo "Directory structure:"
          find app -name "*.json" -o -name "google-services*" 2>/dev/null || echo "No files found"
          exit 1
        fi
        
        echo "=== END EXTREME FIREBASE DEBUGGING ==="

    - name: 🧪 Run Unit Tests
      env:
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      run: |
        echo "=== PRE-TEST FIREBASE VERIFICATION ==="
        # Ensure Firebase files exist right before tests
        mkdir -p app app/src app/src/debug
        echo "$GOOGLE_SERVICES_JSON" > app/google-services.json
        echo "$GOOGLE_SERVICES_JSON" > app/src/google-services.json
        echo "$GOOGLE_SERVICES_JSON" > app/src/debug/google-services.json
        echo "Firebase files recreated before unit tests"
        
        # Verify files exist
        for loc in "app/google-services.json" "app/src/google-services.json" "app/src/debug/google-services.json"; do
          if [ -f "$loc" ]; then
            echo "✅ $loc - OK ($(wc -c < "$loc") bytes)"
          else
            echo "❌ $loc - MISSING"
          fi
        done
        
        # Run the actual tests
        ./gradlew testDebugUnitTest --continue --parallel

    - name: 📤 Upload Unit Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ github.sha }}
        path: |
          app/build/reports/tests/testDebugUnitTest/
          app/build/test-results/testDebugUnitTest/
        retention-days: 5

  # ============================================================================
  # JOB 2: TEST QUALITY METRICS
  # ============================================================================
  test-quality:
    name: 🎯 Test Quality Metrics
    runs-on: ubuntu-latest
    needs: [unit-tests]
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-home-cache-cleanup: true

    - name: 🔧 Make gradlew executable
      run: chmod +x ./gradlew

    - name: 🔥 Setup Firebase Configuration
      env:
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      run: |
        echo "=== FIREBASE SETUP (Test Quality Job) ==="
        
        # Check if secret exists
        if [ -z "$GOOGLE_SERVICES_JSON" ]; then
          echo "❌ CRITICAL: GOOGLE_SERVICES_JSON environment variable is EMPTY!"
          exit 1
        fi
        
        echo "✅ Secret is available (length: ${#GOOGLE_SERVICES_JSON})"
        
        # Create directories for ALL possible locations
        mkdir -p app
        mkdir -p app/src
        mkdir -p app/src/debug
        
        # Create files in ALL locations
        echo "$GOOGLE_SERVICES_JSON" > app/google-services.json
        echo "$GOOGLE_SERVICES_JSON" > app/src/google-services.json
        echo "$GOOGLE_SERVICES_JSON" > app/src/debug/google-services.json
        
        # Verify ALL file locations
        locations=("app/google-services.json" "app/src/google-services.json" "app/src/debug/google-services.json")
        
        all_success=true
        for location in "${locations[@]}"; do
          if [ -f "$location" ] && [ -s "$location" ]; then
            size=$(wc -c < "$location")
            echo "✅ $location - EXISTS (${size} bytes)"
          else
            echo "❌ $location - MISSING or EMPTY"
            all_success=false
          fi
        done
        
        if [ "$all_success" = true ]; then
          echo "✅ ALL FIREBASE FILES CREATED SUCCESSFULLY"
        else
          echo "❌ CRITICAL ERROR: Not all files were created"
          exit 1
        fi
        
        echo "=== END FIREBASE SETUP ==="

    - name: 📊 Generate Test Metrics
      env:
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      run: |
        # Ensure Firebase files exist right before test execution
        mkdir -p app app/src app/src/debug
        echo "$GOOGLE_SERVICES_JSON" > app/google-services.json
        echo "$GOOGLE_SERVICES_JSON" > app/src/google-services.json
        echo "$GOOGLE_SERVICES_JSON" > app/src/debug/google-services.json
        echo "Firebase files recreated before test metrics generation"
        
        # Verify files exist
        for loc in "app/google-services.json" "app/src/google-services.json" "app/src/debug/google-services.json"; do
          if [ -f "$loc" ]; then
            echo "✅ $loc - OK ($(wc -c < "$loc") bytes)"
          else
            echo "❌ $loc - MISSING"
          fi
        done
        
        # Run the actual test command
        ./gradlew testDebugUnitTest --continue
        
        echo "## 🎯 Test Quality Metrics" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count test files
        TEST_FILES=$(find app/src/test -name "*.kt" | wc -l)
        echo "📁 **Test Files:** $TEST_FILES" >> $GITHUB_STEP_SUMMARY
        
        # Count test methods (approximation)
        TEST_METHODS=$(grep -r "@Test" app/src/test --include="*.kt" | wc -l)
        echo "🧪 **Test Methods:** $TEST_METHODS" >> $GITHUB_STEP_SUMMARY
        
        # Test execution summary
        if [ -f app/build/test-results/testDebugUnitTest/TEST-*.xml ]; then
          echo "✅ **Unit Tests:** Executed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Unit Tests:** Execution failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Test Categories Covered" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Data Mappers (PlayerMapper, MatchMapper, etc.)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Repository Pattern (TeamRosterRepository)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ ViewModels (TeamRosterViewModel, MainViewModel)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Navigation (PlayerNavigationHelper)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Utilities (PlayerImageUtil)" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # JOB 3: TEST RESULTS SUMMARY
  # ============================================================================
  test-summary:
    name: 📋 Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, test-quality]
    if: always()
    
    steps:
    - name: 📊 Final Test Summary
      run: |
        echo "## 🧪 Complete Test Suite Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Job Results Overview" >> $GITHUB_STEP_SUMMARY
        echo "| Test Category | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|---------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Unit Tests | ${{ needs.unit-tests.result }} | All unit tests executed |" >> $GITHUB_STEP_SUMMARY
        echo "| 🎯 Test Quality | ${{ needs.test-quality.result }} | Test quality metrics |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏆 Test Coverage Highlights" >> $GITHUB_STEP_SUMMARY
        echo "- **105+ Unit Tests** across multiple components" >> $GITHUB_STEP_SUMMARY
        echo "- **Data Layer Coverage:** Repository pattern, mappers, entities" >> $GITHUB_STEP_SUMMARY
        echo "- **Domain Layer Coverage:** Business logic and models" >> $GITHUB_STEP_SUMMARY
        echo "- **Presentation Layer Coverage:** ViewModels and navigation" >> $GITHUB_STEP_SUMMARY
        echo "- **Utils Coverage:** Image handling, data processing" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Test Run Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY

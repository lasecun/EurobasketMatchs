name: 🚀 CI Pipeline - Build & Test

on:
  push:
    branches: [ main, develop ]
  schedule:
    # Run complete CI daily at 6 AM UTC for main branch
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      run_full_suite:
        description: 'Run full test suite including integration tests'
        required: false
        default: true
        type: boolean

# Cancel previous runs for the same branch
concurrency:
  group: main-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # JOB 1: BUILD & TEST COMPREHENSIVE
  # ============================================================================
  build-and-test:
    name: 🏗️ Build & Test Complete
    runs-on: ubuntu-latest
    timeout-minutes: 35
    
    steps:
    # ----------------------
    # SETUP ENVIRONMENT
    # ----------------------
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-home-cache-cleanup: true

    - name: 🔧 Make gradlew executable
      run: chmod +x ./gradlew

    - name: 🔧 Setup CI Gradle Properties
      run: |
        # Copy CI-specific properties for optimal CI performance
        cp gradle-ci.properties gradle.properties
        echo "org.gradle.console=plain" >> gradle.properties
        echo "org.gradle.logging.level=lifecycle" >> gradle.properties

    # ----------------------
    # BUILD & VALIDATION
    # ----------------------
    - name: 📦 Cache Gradle Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-

    - name: 🔍 Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: 🔥 Setup Firebase Configuration
      env:
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      run: |
        echo "=== EXTREME FIREBASE DEBUGGING ==="
        echo "Working directory: $(pwd)"
        echo "User: $(whoami)"
        echo "Date: $(date)"
        
        # Step 1: Check environment variables
        echo "--- Step 1: Environment Analysis ---"
        if [ -z "$GOOGLE_SERVICES_JSON" ]; then
          echo "❌ CRITICAL: GOOGLE_SERVICES_JSON environment variable is EMPTY or NOT SET!"
          echo "Available environment variables containing 'GOOGLE':"
          env | grep -i google || echo "No Google-related environment variables found"
          echo ""
          echo "This means either:"
          echo "1. The secret 'GOOGLE_SERVICES_JSON' is not configured in GitHub"
          echo "2. The secret exists but contains no content"
          echo "3. There's a permission issue accessing the secret"
          echo ""
          echo "SOLUTION: Go to GitHub repo → Settings → Secrets and variables → Actions"
          echo "Check that 'GOOGLE_SERVICES_JSON' exists and has content"
          exit 1
        fi
        
        echo "✅ Secret environment variable exists"
        echo "📏 Content length: ${#GOOGLE_SERVICES_JSON} characters"
        
        # Step 2: Analyze secret content
        echo "--- Step 2: Content Analysis ---"
        if [ ${#GOOGLE_SERVICES_JSON} -lt 50 ]; then
          echo "⚠️  WARNING: Secret seems too short for a valid Firebase config"
          echo "First 30 chars: '$(echo "$GOOGLE_SERVICES_JSON" | head -c 30)'"
        fi
        
        # Check if it looks like JSON
        if echo "$GOOGLE_SERVICES_JSON" | grep -q "^{"; then
          echo "✅ Content starts with '{' (looks like JSON)"
        else
          echo "⚠️  Content doesn't start with '{' - may not be JSON"
          echo "First 20 chars: '$(echo "$GOOGLE_SERVICES_JSON" | head -c 20)'"
        fi
        
        # Step 3: Create directories
        echo "--- Step 3: Directory Creation ---"
        mkdir -p app
        mkdir -p app/src
        mkdir -p app/src/debug
        echo "✅ Created directories: app/, app/src/, app/src/debug/"
        
        # Step 4: Create files in ALL possible locations
        echo "--- Step 4: File Creation ---"
        echo "$GOOGLE_SERVICES_JSON" > app/google-services.json
        echo "$GOOGLE_SERVICES_JSON" > app/src/google-services.json
        echo "$GOOGLE_SERVICES_JSON" > app/src/debug/google-services.json
        
        # Step 5: Verify ALL file locations
        echo "--- Step 5: File Verification ---"
        locations=(
          "app/google-services.json"
          "app/src/google-services.json" 
          "app/src/debug/google-services.json"
        )
        
        all_success=true
        for location in "${locations[@]}"; do
          if [ -f "$location" ] && [ -s "$location" ]; then
            size=$(wc -c < "$location")
            echo "✅ $location - EXISTS (${size} bytes)"
            echo "   Permissions: $(ls -la "$location")"
            echo "   First line: $(head -n 1 "$location" | head -c 50)..."
          else
            echo "❌ $location - MISSING or EMPTY"
            all_success=false
          fi
        done
        
        # Step 6: Final validation
        echo "--- Step 6: Final Validation ---"
        if [ "$all_success" = true ]; then
          echo "✅ ALL FILES CREATED SUCCESSFULLY"
          
          # Try to validate JSON structure
          if command -v python3 >/dev/null 2>&1; then
            echo "--- JSON Validation ---"
            if echo "$GOOGLE_SERVICES_JSON" | python3 -m json.tool >/dev/null 2>&1; then
              echo "✅ Valid JSON structure"
            else
              echo "⚠️  Invalid JSON structure - but files exist"
            fi
          fi
          
          # Show absolute paths (what Google Services plugin will see)
          echo "--- Absolute Paths ---"
          for location in "${locations[@]}"; do
            echo "📁 $(pwd)/$location"
          done
          
        else
          echo "❌ CRITICAL ERROR: Not all files were created successfully"
          echo "Directory structure:"
          find app -name "*.json" -o -name "google-services*" 2>/dev/null || echo "No files found"
          exit 1
        fi
        
        echo "=== END FIREBASE DEBUGGING ==="

    - name: 🔍 Pre-Build Firebase File Verification
      run: |
        echo "=== PRE-BUILD VERIFICATION ==="
        echo "This runs just before Gradle build to ensure files are still there"
        
        # Check all expected locations
        echo "Checking all Google Services file locations:"
        find . -name "google-services.json" -exec echo "Found: {}" \; -exec ls -la {} \; -exec head -n 1 {} \; 2>/dev/null || echo "No google-services.json files found"
        
        # Specifically check the locations the error message mentions
        error_locations=(
          "app/src/debug/google-services.json"
          "app/src/google-services.json" 
          "app/src/Debug/google-services.json"
          "app/google-services.json"
        )
        
        echo ""
        echo "Checking exact locations from error message:"
        for loc in "${error_locations[@]}"; do
          if [ -f "$loc" ]; then
            echo "✅ $loc - EXISTS ($(wc -c < "$loc") bytes)"
          else
            echo "❌ $loc - MISSING"
          fi
        done
        
        echo ""
        echo "Working directory: $(pwd)"
        echo "Directory tree:"
        find app -type f -name "*.json" 2>/dev/null | head -20
        echo "=== END PRE-BUILD VERIFICATION ==="

    - name: 🧹 Clean Project
      run: ./gradlew clean

    - name: 🏗️ Build Debug APK
      run: ./gradlew assembleDebug --stacktrace --scan
      env:
        CI: true

    - name: 🏗️ Build Release APK
      run: ./gradlew assembleRelease --stacktrace
      env:
        CI: true

    # ----------------------
    # COMPREHENSIVE TESTING
    # ----------------------
    - name: 🧪 Run Complete Unit Test Suite
      run: ./gradlew testDebugUnitTest --continue --parallel --stacktrace
      env:
        CI: true

    - name: 📊 Generate Test Quality Metrics
      run: |
        echo "## 🎯 Comprehensive Test Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count test files and methods
        TEST_FILES=$(find app/src/test -name "*.kt" | wc -l)
        TEST_METHODS=$(grep -r "@Test" app/src/test --include="*.kt" | wc -l)
        
        echo "📁 **Test Files:** $TEST_FILES" >> $GITHUB_STEP_SUMMARY
        echo "🧪 **Test Methods:** $TEST_METHODS" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Test execution analysis
        if [ -f app/build/test-results/testDebugUnitTest/TEST-*.xml ]; then
          echo "✅ **Unit Tests:** Executed successfully" >> $GITHUB_STEP_SUMMARY
          
          # Extract test results if available
          TOTAL_TESTS=$(find app/build/test-results -name "*.xml" -exec grep -l "testcase" {} \; | xargs grep "testcase" | wc -l 2>/dev/null || echo "N/A")
          echo "📊 **Total Test Cases:** $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Unit Tests:** Execution failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Test Coverage Areas" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Data Layer:** Mappers, Repositories, DAOs" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Domain Layer:** Business logic, Use cases" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Presentation Layer:** ViewModels, Navigation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Utilities:** Helper functions, Extensions" >> $GITHUB_STEP_SUMMARY

    # ----------------------
    # CODE QUALITY ANALYSIS
    # ----------------------
    - name: 🔍 Run Android Lint (Complete)
      run: ./gradlew lintDebug --continue
      env:
        CI: true

    - name: 📝 Generate Lint Report Summary
      if: always()
      run: |
        if [ -f app/build/reports/lint-results-debug.html ]; then
          echo "📋 **Android Lint:** Report generated successfully" >> $GITHUB_STEP_SUMMARY
          
          # Count lint issues if XML report exists
          if [ -f app/build/reports/lint-results-debug.xml ]; then
            LINT_ERRORS=$(grep -c 'severity="Error"' app/build/reports/lint-results-debug.xml 2>/dev/null || echo "0")
            LINT_WARNINGS=$(grep -c 'severity="Warning"' app/build/reports/lint-results-debug.xml 2>/dev/null || echo "0")
            echo "🔴 **Lint Errors:** $LINT_ERRORS" >> $GITHUB_STEP_SUMMARY
            echo "🟡 **Lint Warnings:** $LINT_WARNINGS" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ **Android Lint:** Report generation failed" >> $GITHUB_STEP_SUMMARY
        fi

    # ----------------------
    # ARTIFACTS & REPORTS
    # ----------------------
    - name: 📤 Upload Debug APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: debug-apk-${{ github.sha }}
        path: app/build/outputs/apk/debug/*.apk
        retention-days: 7

    - name: 📤 Upload Release APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: release-apk-${{ github.sha }}
        path: app/build/outputs/apk/release/*.apk
        retention-days: 30

    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-complete-${{ github.sha }}
        path: |
          app/build/reports/tests/testDebugUnitTest/
          app/build/test-results/testDebugUnitTest/
        retention-days: 14

    - name: 📋 Upload Lint Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-results-complete-${{ github.sha }}
        path: |
          app/build/reports/lint-results-debug.html
          app/build/reports/lint-results-debug.xml
        retention-days: 14

  # ============================================================================
  # JOB 2: CODE QUALITY ANALYSIS (DETEKT)
  # ============================================================================
  code-quality:
    name: 🔍 Code Quality Analysis
    runs-on: ubuntu-latest
    needs: [build-and-test]
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: 🔧 Make gradlew executable
      run: chmod +x ./gradlew

    - name: 📊 Run Detekt (Complete Analysis)
      run: |
        ./gradlew detekt --continue
        
        echo "## 🔍 Code Quality Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f app/build/reports/detekt/detekt.html ]; then
          echo "✅ **Detekt Analysis:** Completed successfully" >> $GITHUB_STEP_SUMMARY
          
          # Try to extract some basic metrics
          if [ -f app/build/reports/detekt/detekt.xml ]; then
            TOTAL_ISSUES=$(grep -c "<error\|<warning" app/build/reports/detekt/detekt.xml 2>/dev/null || echo "N/A")
            echo "📊 **Total Issues Found:** $TOTAL_ISSUES" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Analysis Categories" >> $GITHUB_STEP_SUMMARY
          echo "- 🎨 **Style:** Code formatting and naming conventions" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 **Complexity:** Cyclomatic complexity and method length" >> $GITHUB_STEP_SUMMARY
          echo "- 🐛 **Potential Bugs:** Unsafe casts and exception handling" >> $GITHUB_STEP_SUMMARY
          echo "- 🧹 **Code Smells:** Unused parameters and imports" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Detekt Analysis:** Failed to generate report" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 📋 Upload Detekt Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: detekt-results-complete-${{ github.sha }}
        path: |
          app/build/reports/detekt/
        retention-days: 14

  # ============================================================================
  # JOB 3: DEPLOYMENT PREPARATION
  # ============================================================================
  deployment-prep:
    name: 🚀 Deployment Preparation
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.ref == 'refs/heads/main' && success()
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🏷️ Generate Release Info
      run: |
        echo "## 🚀 Deployment Ready" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** \`main\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Quality Gates Passed" >> $GITHUB_STEP_SUMMARY
        echo "- 🏗️ **Build:** Success" >> $GITHUB_STEP_SUMMARY
        echo "- 🧪 **Tests:** All passed" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 **Code Quality:** Analysis completed" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 **Lint:** No blocking issues" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # JOB 4: FINAL SUMMARY
  # ============================================================================
  final-summary:
    name: 📋 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, deployment-prep]
    if: always()
    
    steps:
    - name: 📊 Complete Pipeline Summary
      run: |
        echo "## 🎯 Complete CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Job Status Overview" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Duration |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Build & Test | ${{ needs.build-and-test.result }} | ~25-30 min |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 Code Quality | ${{ needs.code-quality.result }} | ~10-15 min |" >> $GITHUB_STEP_SUMMARY
        echo "| 🚀 Deployment Prep | ${{ needs.deployment-prep.result }} | ~5 min |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏆 Pipeline Highlights" >> $GITHUB_STEP_SUMMARY
        echo "- **Complete Build:** Debug + Release APKs generated" >> $GITHUB_STEP_SUMMARY
        echo "- **Comprehensive Testing:** Full unit test suite executed" >> $GITHUB_STEP_SUMMARY
        echo "- **Quality Analysis:** Lint + Detekt static analysis" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifact Management:** All reports and APKs uploaded" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Pipeline Execution Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

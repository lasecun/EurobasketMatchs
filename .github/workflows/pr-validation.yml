name: 🔄 Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel previous runs if a new commit is pushed
concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # JOB 1: PR VALIDATION CHECKS
  # ============================================================================
  pr-validation:
    name: 🔍 PR Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 📋 PR Info
      run: |
        echo "## 🔄 Pull Request Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**PR Title:** ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
        echo "**Source Branch:** \`${{ github.head_ref }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Target Branch:** \`${{ github.base_ref }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Author:** @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
        echo "**Files Changed:** ${{ github.event.pull_request.changed_files }}" >> $GITHUB_STEP_SUMMARY
        echo "**Additions:** +${{ github.event.pull_request.additions }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deletions:** -${{ github.event.pull_request.deletions }}" >> $GITHUB_STEP_SUMMARY

    - name: 🏷️ Validate PR Title
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "Validating PR title: '$PR_TITLE'"
        
        # Check if title matches conventional commit format
        if echo "$PR_TITLE" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|chore|ci)(\(.+\))?: .+'; then
          echo "✅ PR title follows conventional commit format"
          echo "**✅ Title Format:** Valid conventional commit" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ PR title should follow conventional commit format"
          echo "**❌ Title Format:** Invalid - should be 'type(scope): description'" >> $GITHUB_STEP_SUMMARY
          echo "Examples: feat: add new feature, fix: resolve bug, docs: update readme" >> $GITHUB_STEP_SUMMARY
          echo "Current title: '$PR_TITLE'" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

  # ============================================================================
  # JOB 2: QUICK BUILD CHECK
  # ============================================================================
  quick-build:
    name: ⚡ Quick Build Check
    runs-on: ubuntu-latest
    needs: pr-validation
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: 🔧 Make gradlew executable
      run: chmod +x ./gradlew

    - name: � Setup CI Gradle Properties
      run: |
        # Copy CI-specific properties
        cp gradle-ci.properties gradle.properties
        echo "org.gradle.console=plain" >> gradle.properties
        echo "org.gradle.logging.level=lifecycle" >> gradle.properties

    - name: �📦 Cache Gradle Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}

    - name: 🧹 Clean & Build
      run: |
        ./gradlew clean --stacktrace
        ./gradlew assembleDebug --stacktrace --no-daemon

    - name: ✅ Build Success
      run: |
        echo "## ⚡ Quick Build Results" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Build Status:** Success" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Gradle Build:** Completed without errors" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # JOB 3: ESSENTIAL TESTS
  # ============================================================================
  essential-tests:
    name: 🧪 Essential Tests
    runs-on: ubuntu-latest
    needs: quick-build
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: 🔧 Make gradlew executable
      run: chmod +x ./gradlew

    - name: 🧪 Run Critical Tests
      run: |
        # Run only the most critical tests for PR validation
        ./gradlew testDebugUnitTest --tests="*Mapper*" --continue
        ./gradlew testDebugUnitTest --tests="*Repository*" --continue
        ./gradlew testDebugUnitTest --tests="*ViewModel*" --continue

    - name: 📊 Test Summary
      run: |
        echo "## 🧪 Essential Test Results" >> $GITHUB_STEP_SUMMARY
        if [ -f app/build/test-results/testDebugUnitTest/TEST-*.xml ]; then
          echo "✅ **Core Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Mappers:** Validated" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Repositories:** Validated" >> $GITHUB_STEP_SUMMARY
          echo "✅ **ViewModels:** Validated" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Core Tests:** Some tests may have failed" >> $GITHUB_STEP_SUMMARY
        fi

  # ============================================================================
  # JOB 4: CODE QUALITY GATE
  # ============================================================================
  code-quality-gate:
    name: 🚦 Code Quality Gate
    runs-on: ubuntu-latest
    needs: essential-tests
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ☕ Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: 🔧 Make gradlew executable
      run: chmod +x ./gradlew

    - name: 🔍 Quick Lint Check
      run: |
        ./gradlew lintDebug || true

    - name: 📊 Changed Files Analysis
      run: |
        echo "## 🚦 Code Quality Gate Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Get changed files
        git fetch origin ${{ github.base_ref }}
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(kt|java)$' || true)
        
        if [ -n "$CHANGED_FILES" ]; then
          echo "### 📝 Modified Source Files:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$CHANGED_FILES" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          FILE_COUNT=$(echo "$CHANGED_FILES" | wc -l)
          echo "**Total Files Changed:** $FILE_COUNT" >> $GITHUB_STEP_SUMMARY
        else
          echo "**No source files changed in this PR**" >> $GITHUB_STEP_SUMMARY
        fi

  # ============================================================================
  # JOB 5: PR APPROVAL GATE
  # ============================================================================
  pr-approval-gate:
    name: ✅ PR Approval Gate
    runs-on: ubuntu-latest
    needs: [pr-validation, quick-build, essential-tests, code-quality-gate]
    if: always()
    
    steps:
    - name: 📊 Final PR Status
      run: |
        echo "## ✅ Pull Request Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status | Description |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 PR Validation | ${{ needs.pr-validation.result }} | Title format & basic checks |" >> $GITHUB_STEP_SUMMARY
        echo "| ⚡ Quick Build | ${{ needs.quick-build.result }} | Fast compilation check |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Essential Tests | ${{ needs.essential-tests.result }} | Core functionality tests |" >> $GITHUB_STEP_SUMMARY
        echo "| 🚦 Code Quality | ${{ needs.code-quality-gate.result }} | Quality and lint checks |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Determine overall status
        if [[ "${{ needs.pr-validation.result }}" == "success" && 
              "${{ needs.quick-build.result }}" == "success" && 
              "${{ needs.essential-tests.result }}" == "success" && 
              "${{ needs.code-quality-gate.result }}" == "success" ]]; then
          echo "### 🎉 **PR Ready for Review!**" >> $GITHUB_STEP_SUMMARY
          echo "All validation checks passed successfully. This PR is ready for human review." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ⚠️ **PR Requires Attention**" >> $GITHUB_STEP_SUMMARY
          echo "Some validation checks failed. Please review and fix the issues before requesting review." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**PR:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ github.head_ref }}\` → \`${{ github.base_ref }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Validation Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY

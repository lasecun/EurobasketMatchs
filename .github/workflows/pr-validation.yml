name: üîÑ PR Validation - Fast Feedback

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel previous runs if a new commit is pushed
concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # JOB 1: QUICK PR VALIDATION
  # ============================================================================
  quick-validation:
    name: ‚ö° Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üìã PR Info Summary
      run: |
        echo "## üîÑ Pull Request Quick Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**PR Title:** ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
        echo "**Source Branch:** \`${{ github.head_ref }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Target Branch:** \`${{ github.base_ref }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Author:** @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
        echo "**Files Changed:** ${{ github.event.pull_request.changed_files }}" >> $GITHUB_STEP_SUMMARY

    - name: üè∑Ô∏è Validate PR Title
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "Validating PR title: '$PR_TITLE'"
        
        # Check if title matches conventional commit format
        if echo "$PR_TITLE" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|chore|ci)(\(.+\))?: .+'; then
          echo "‚úÖ PR title follows conventional commit format"
          echo "**‚úÖ Title Format:** Valid conventional commit" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è PR title should follow conventional commit format (not blocking)"
          echo "**‚ö†Ô∏è Title Format:** Consider using conventional commit format" >> $GITHUB_STEP_SUMMARY
          echo "üí° **Suggestion:** Use format like 'feat: description' or 'fix: description'" >> $GITHUB_STEP_SUMMARY
        fi

  # ============================================================================
  # JOB 2: FAST BUILD & TEST
  # ============================================================================
  fast-build-test:
    name: ‚ö° Fast Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 12
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: ‚òï Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: üîß Make gradlew executable
      run: chmod +x ./gradlew

    - name: üîß Setup CI Gradle Properties
      run: |
        # Copy CI-specific properties for optimal CI performance
        cp gradle-ci.properties gradle.properties
        echo "org.gradle.console=plain" >> gradle.properties

    - name: üì¶ Cache Gradle Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          gradle-${{ runner.os }}-

    - name: üßπ Clean & Build (Debug Only)
      run: |
        ./gradlew clean assembleDebug --parallel --daemon
        echo "‚úÖ **Debug Build:** Successful" >> $GITHUB_STEP_SUMMARY

    - name: üß™ Run Critical Tests Only
      run: |
        # Run tests with focus on critical components only
        ./gradlew testDebugUnitTest --tests="*ViewModel*" --tests="*Repository*" --tests="*Mapper*" --continue --parallel --daemon
        
        echo "## üß™ Critical Tests Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f app/build/test-results/testDebugUnitTest/TEST-*.xml ]; then
          echo "‚úÖ **Critical Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          echo "üéØ **Focus Areas:** ViewModels, Repositories, Mappers" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Critical Tests:** Some tests failed" >> $GITHUB_STEP_SUMMARY
        fi

  # ============================================================================
  # JOB 3: QUICK CODE QUALITY CHECK
  # ============================================================================
  quick-quality:
    name: ‚ö° Quick Quality Check
    runs-on: ubuntu-latest
    needs: [fast-build-test]
    timeout-minutes: 8
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: ‚òï Setup JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: üîß Make gradlew executable
      run: chmod +x ./gradlew

    - name: üîç Quick Lint Check (Fatal only)
      run: |
        # Run lint with focus on errors only, skip warnings for speed
        ./gradlew lintDebug -PdisableLintWarnings=true --continue --parallel --daemon || true
        
        echo "## üîç Quick Quality Check" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f app/build/reports/lint-results-debug.xml ]; then
          LINT_ERRORS=$(grep -c 'severity="Error"' app/build/reports/lint-results-debug.xml 2>/dev/null || echo "0")
          echo "üî¥ **Lint Errors:** $LINT_ERRORS" >> $GITHUB_STEP_SUMMARY
          
          if [ "$LINT_ERRORS" -eq "0" ]; then
            echo "‚úÖ **Status:** No blocking lint errors" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Status:** $LINT_ERRORS lint errors found (check full CI)" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "‚ö†Ô∏è **Lint:** Report not generated" >> $GITHUB_STEP_SUMMARY
        fi

    - name: üîç Quick Detekt Check (High Priority)
      run: |
        # Run detekt with relaxed threshold for PR validation
        DETEKT_THRESHOLD=300 ./gradlew detekt --continue --parallel --daemon || true
        
        if [ -f app/build/reports/detekt/detekt.xml ]; then
          DETEKT_ISSUES=$(grep -c "<error\|<warning" app/build/reports/detekt/detekt.xml 2>/dev/null || echo "0")
          echo "üîç **Detekt Issues:** $DETEKT_ISSUES" >> $GITHUB_STEP_SUMMARY
          echo "üí° **Note:** Full analysis runs in main CI pipeline" >> $GITHUB_STEP_SUMMARY
        else
          echo "üîç **Detekt:** Quick scan completed" >> $GITHUB_STEP_SUMMARY
        fi

  # ============================================================================
  # JOB 4: PR SUMMARY
  # ============================================================================
  pr-summary:
    name: üìã PR Validation Summary
    runs-on: ubuntu-latest
    needs: [quick-validation, fast-build-test, quick-quality]
    if: always()
    
    steps:
    - name: üìä Final PR Status
      run: |
        echo "## üéØ Pull Request Validation Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚ö° Fast Feedback Results" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status | Time |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| üîÑ PR Validation | ${{ needs.quick-validation.result }} | ~2 min |" >> $GITHUB_STEP_SUMMARY
        echo "| ‚ö° Build & Test | ${{ needs.fast-build-test.result }} | ~8 min |" >> $GITHUB_STEP_SUMMARY
        echo "| üîç Quality Check | ${{ needs.quick-quality.result }} | ~5 min |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Calculate overall status
        if [[ "${{ needs.fast-build-test.result }}" == "success" ]]; then
          echo "### ‚úÖ PR Status: READY FOR REVIEW" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ **All critical checks passed!**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Build compiles successfully" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Critical tests pass" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ No blocking quality issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üí° **Next:** Complete CI will run after merge to main/develop" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå PR Status: NEEDS ATTENTION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **Some checks failed - please review:**" >> $GITHUB_STEP_SUMMARY
          echo "- Check build errors in logs" >> $GITHUB_STEP_SUMMARY
          echo "- Review test failures" >> $GITHUB_STEP_SUMMARY
          echo "- Fix any critical quality issues" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**PR:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ github.head_ref }}\` ‚Üí \`${{ github.base_ref }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Validation Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY

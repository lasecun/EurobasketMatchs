package es.itram.basketmatch.integration

import es.itram.basketmatch.data.datasource.remote.EuroLeagueRemoteDataSource
import es.itram.basketmatch.data.datasource.remote.scraper.EuroLeagueWebScraper
import kotlinx.coroutines.runBlocking
import org.junit.Test
import java.io.File

/**
 * Ultra Simple Real Data Test - should actually run
 */
class UltraSimpleRealTest {

    @Test
    fun obtener_datos_reales_euroleague() {
        println("üöÄ INICIANDO OBTENCI√ìN DE DATOS REALES...")
        
        runBlocking {
            try {
                // Usar directamente el scraper
                val scraper = EuroLeagueWebScraper()
                val teams = scraper.getTeams()
                
                val outputFile = File("/Users/juanjomarti/Projects/t/euroleague_real_data.txt")
                
                outputFile.writeText("=== DATOS REALES DE EUROLEAGUE ===\n")
                outputFile.appendText("Fecha: ${System.currentTimeMillis()}\n\n")
                
                if (teams.isNotEmpty()) {
                    println("‚úÖ Obtenidos ${teams.size} equipos reales")
                    outputFile.appendText("‚úÖ EQUIPOS REALES OBTENIDOS: ${teams.size}\n\n")
                    
                    teams.forEachIndexed { index, team ->
                        val info = "${index + 1}. ${team.name} - ${team.fullName} (${team.country})"
                        println(info)
                        outputFile.appendText("$info\n")
                    }
                    
                    outputFile.appendText("\n=== DETALLES T√âCNICOS ===\n")
                    outputFile.appendText("URL base: https://www.euroleaguebasketball.net\n")
                    outputFile.appendText("M√©todo: Web scraping con JSoup\n")
                    outputFile.appendText("Estado: ‚úÖ DATOS REALES OBTENIDOS\n")
                    
                    println("üìÑ Datos guardados en: ${outputFile.absolutePath}")
                    
                } else {
                    println("‚ùå No se obtuvieron datos")
                    outputFile.appendText("‚ùå ERROR: No se obtuvieron datos\n")
                }
                
            } catch (e: Exception) {
                println("‚ùå Error: ${e.message}")
                e.printStackTrace()
                
                val outputFile = File("/Users/juanjomarti/Projects/t/euroleague_error.txt")
                outputFile.writeText("ERROR al obtener datos reales:\n${e.message}\n\n${e.stackTrace.joinToString("\n")}")
            }
        }
    }
}
